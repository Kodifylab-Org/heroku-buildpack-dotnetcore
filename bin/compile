#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit
set -o pipefail
set -o nounset
unset GIT_DIR

### Configure directories
BASE_DIR="$(pwd)"
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

### Load dependencies
source "$BP_DIR/bin/util/common.sh"
source "$BP_DIR/bin/util/apt_dpkg_install.sh"

export_env_dir "$ENV_DIR"

### Local variable declaration
declare herokuos_version framework_version runtime_framework_version

# Get OS
herokuos_version="$(get_linux_platform_version)"

print "OS: Ubuntu $herokuos_version"
print "Stack version: ${STACK}"

print "Installing prerequisites for .NET Core on Ubuntu"
if [[ $herokuos_version == "16.04" ]]; then
	apt_install libicu55 openssl1.0
elif [[ $herokuos_version == "18.04" ]]; then
	apt_install libicu60 openssl1.0
elif [[ $herokuos_version == "19.04" ]]; then
	apt_install libicu63 libssl1.1
elif [[ $herokuos_version == "20.04" ]]; then
   	apt_install libicu66 libssl1.1
elif [[ $herokuos_version == "22.04" ]]; then
   	apt_install apt-transport-https libicu70 libssl3 libunwind8 libgssapi-krb5-2 libc6 liblttng-ust1
fi

export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
export DOTNET_CLI_TELEMETRY_OPTOUT=1
export ASPNETCORE_ENVIRONMENT=production

PROJECT_FILE="CleanArch.Service.WebApi/CleanArch.Service.WebApi.csproj"
APP_ASSEMBLY="CleanArch.Service.WebApi"
RELEASE_DIR="$APP_ASSEMBLY_Release"

cd "$BUILD_DIR"

print "Publishing $PROJECT_FILE..."
dotnet publish "$PROJECT_FILE" --output "$BUILD_DIR/$RELEASE_DIR" --configuration Release --runtime linux-x64 --no-self-contained --verbosity detailed

print "Listing published files:"
ls -R "$BUILD_DIR/$RELEASE_DIR"

APP_DLL="$BUILD_DIR/$RELEASE_DIR/$APP_ASSEMBLY.dll"
if [ ! -f "$APP_DLL" ]; then
    echo "Error: DLL not found at $APP_DLL"
    exit 1
fi

# Run database migrations
print "Running migrations..."
dotnet new tool-manifest
dotnet tool install dotnet-ef --version 9.*
export PATH="$PATH:$BUILD_DIR/.dotnet/tools"
dotnet tool run dotnet-ef migrations list --startup-project "$APP_ASSEMBLY" --context AppDbContext
dotnet tool run dotnet-ef database update --startup-project "$APP_ASSEMBLY" --context AppDbContext

find -maxdepth 1 ! -name Procfile ! -name .profile.d ! -name .apt ! -name .dotnet ! -name .heroku ! -name node_modules ! -name "$RELEASE_DIR"  -exec rm -rv {} \; > /dev/null 2>&1;

if [[ -n "$APP_ASSEMBLY" ]]; then
cat << EOT >> "${BUILD_DIR}/Procfile"
web: cd \$HOME/$RELEASE_DIR && dotnet "./$APP_ASSEMBLY.dll" --urls http://+:\$PORT
EOT
fi
